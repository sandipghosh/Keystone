@using Keystone.Web.Models
@model UserAccountModel

<script type="text/javascript">
    (function ($, win) {
        $(document).ready(function () { });

        this.SubmitChangeProfile = function () {
            try {
                if ($('#frmChangeProfile').valid()) {
                    $('#frmChangeProfile').submit();
                }
            } catch (ex) {
                console.log(ex);
            }
        };

        this.ChangeProfile_OnSuccess = function (data) {
            try {
                if (data) {
                    if (data.IsUserCreated) {
                        var referalUrl = $('#ReferalUrl').val();

                        alert("Your profile has been changed successfully.", function () {
                            if (referalUrl == '') {
                                win.location.href = '@Url.Action("Index", "Home")';
                            }
                            else {
                                win.location.href = Base64Decode(referalUrl);
                            }
                        });
                    }
                }
            } catch (ex) {
                console.log(ex);
            }
        };

        this.CancelProfile = function () {
            try {
                var referalUrl = $('#ReferalUrl').val();
                if (referalUrl == '') {
                    win.location.href = '@Url.Action("Index", "Home")';
                }
                else {
                    win.location.href = Base64Decode(referalUrl);
                }
            } catch (ex) {
                console.log(ex);
            }
        };
    }(jQuery, window));

</script>

@using (Ajax.BeginForm("UpdateUser", "UserAccount", null,
    new AjaxOptions { HttpMethod = "POST", OnSuccess = "ChangeProfile_OnSuccess" }, new { id = "frmChangeProfile" }))
{
    <div class="popup-cotainer content-wrapper">
        <div class="popup-title">Change Profile</div>
        <div class="popup-content row-container">
            <div class="row-item">
                <div class="row-col-left">
                    User Id :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.UserId, new { @class = "gradient_effect", placeholder = "User Id", @readonly = "readonly" })
                    <i class="note">**User Id is non-editable.</i>
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Email Id :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.EmailId, new { @class = "gradient_effect", placeholder = "Email Id" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    First Name :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "gradient_effect", placeholder = "First Name" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Last Name :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.LastName, new { @class = "gradient_effect", placeholder = "Last Name" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Contact Number :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.PrimaryContact, new { @class = "gradient_effect", placeholder = "Contact Number" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Address 1 :
                </div>
                <div class="row-col-right">
                    @Html.TextAreaFor(x => x.Address1, new { @class = "gradient_effect", placeholder = "Address 1", style = "width: 86%;" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Address 2 :
                </div>
                <div class="row-col-right">
                    @Html.TextAreaFor(x => x.Address2, new { @class = "gradient_effect", placeholder = "Address 2", style = "width: 86%;" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    State :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.State, new { @class = "gradient_effect", placeholder = "State" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    City :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.City, new { @class = "gradient_effect", placeholder = "City" })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Zip Co. :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.Pin, new { @class = "gradient_effect", placeholder = "Zip Co." })
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Country :
                </div>
                <div class="row-col-right">
                    @Html.TextBoxFor(x => x.Country, new { @class = "gradient_effect", placeholder = "Country" })
                </div>
            </div>
        </div>
        <div class="popup-navigation" style="padding: 2% 0 1% 26%; width: 74%;">
            <input type="button" style="margin-left: 0;" class="sub"
                onclick="SubmitChangeProfile();" value="Submit" />
            <input type="button" class="sub" style="margin-left: 1%;"
                   onclick="CancelProfile();" value="Cancel" />
        </div>
    </div>

    @Html.Hidden("ReferalUrl", (object)ViewData["ReferalUrl"])
    @Html.HiddenFor(x => x.UserAccountId)
    @Html.HiddenFor(x => x.Password)
    @Html.HiddenFor(x => x.IsNewUser)
    @Html.HiddenFor(x => x.IsAdmin)
    @Html.HiddenFor(x => x.StatusId)
    @Html.HiddenFor(x => x.CreatedBy)
    @Html.HiddenFor(x => x.CreatedOn)
}
