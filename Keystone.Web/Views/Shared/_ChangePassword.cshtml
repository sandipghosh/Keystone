@using Keystone.Web.Models
@using Keystone.Web.Utilities
@model UserAccountModel

<script type="text/javascript">
    @(Html.JsMinify(@<text>
        (function ($, win) {
            $.validator.addMethod(
                "regex", function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Invalid password."
            );
            $.validator.addMethod("customrule", function (value, element, param) {
                return this.optional(element) || value === $(element).val();
            }, "Please enter the same value again.");

            $(document).ready(function () {
                ChangeValidationSetup();
            });

            var ChangeValidationSetup = function () {
                try {
                    var validationData = GetValidationErrorMarkup();
                    validationData.rules = {
                        Password: { required: true, regex: '^(?=.*[0-9]+.*)(?=.*[a-zA-Z]+.*)[0-9a-zA-Z]{8,}$' },
                        ConfirmPassword: { required: true, customrule: true }
                    };
                    validationData.messages = {
                        Password: { required: 'Password is required', regex: 'Invalid password.' },
                        ConfirmPassword: { required: 'Confirm password is required' }
                    };
                    $('#frmChangeUserPassword').validate(validationData);
                } catch (ex) {
                    console.log(ex);
                }
            };

            this.SubmitChangePassword = function () {
                try {
                    if ($('#frmChangeUserPassword').valid()) {
                        $('#frmChangeUserPassword').submit();
                    }
                } catch (ex) {
                    console.log(ex);
                }
            };

            this.ChangeUserPassword_OnSuccess = function (data) {
                try {
                    if (data) {
                        if (data.IsUserCreated) {
                            var referalUrl = $('#ReferalUrl').val();

                            alert("Your password has been changed successfully.", function () {
                                if (referalUrl == '') {
                                    win.location.href = '@Url.Action("Index", "Home")';
                                }
                                else {
                                    win.location.href = Base64Decode(referalUrl);
                                }
                            });
                        }
                        else {
                            alert(data.Message);
                        }
                    }
                } catch (ex) {
                    console.log(ex);
                }
            };

            this.CancelChange = function () {
                try {
                    var referalUrl = $('#ReferalUrl').val();
                    if (referalUrl == '') {
                        win.location.href = '@Url.Action("Index", "Home")';
                    }
                    else {
                        win.location.href = Base64Decode(referalUrl);
                    }
                } catch (ex) {
                    console.log(ex);
                }
            };
        }(jQuery, window));
    </text>))
</script>

@using (Ajax.BeginForm("UpdateUser", "UserAccount", null,
    new AjaxOptions { OnSuccess = "ChangeUserPassword_OnSuccess" }, new { id = "frmChangeUserPassword" }))
{
    <div class="popup-cotainer content-wrapper">
        <div class="popup-title">Change Password</div>
        <div class="popup-content row-container">
            @if (ViewData["ViewType"].ToString() == "ChangePasswordForNewUser")
            {
                @Html.HiddenFor(x => x.UserId)
                @Html.Hidden("IsNewUser", 1)
            }
            else
            {
                @Html.HiddenFor(x => x.UserId)
                @Html.HiddenFor(x => x.IsNewUser)
            }
            <div class="row-item">
                <div class="row-col-left">
                    Password :
                </div>
                <div class="row-col-right">
                    @Html.TextBox("Password", "", new { type = "password", placeholder = "Password" })
                    <i class="note">**Password must contain at least one letter, at least one number, and be longer than 8 charaters.</i>
                </div>
            </div>
            <div class="row-item">
                <div class="row-col-left">
                    Confirm Password :
                </div>
                <div class="row-col-right">
                    @Html.TextBox("ConfirmPassword", "", new { type = "password", placeholder = "Confirm Password" })
                </div>
            </div>
        </div>
        <div class="popup-navigation" style="padding: 2% 0 1% 26%; width: 74%;">
            <input type="button" style="margin-left: 0;" class="sub" onclick="SubmitChangePassword();" value="Submit" />
            <input type="button" style="margin-left: 1%;" class="sub" onclick="CancelChange();" value="Cancel" />
        </div>
    </div>

    @Html.HiddenFor(x => x.UserAccountId)
    @Html.HiddenFor(x => x.FirstName)
    @Html.HiddenFor(x => x.LastName)
    @Html.HiddenFor(x => x.EmailId)
    @Html.HiddenFor(x => x.IsAdmin)
    @Html.HiddenFor(x => x.PrimaryContact)
    @Html.HiddenFor(x => x.StatusId)
    @Html.HiddenFor(x => x.CreatedBy)
    @Html.HiddenFor(x => x.CreatedOn)
    @Html.Hidden("ReferalUrl", (object)ViewData["ReferalUrl"])
}
